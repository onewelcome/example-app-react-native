require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

source 'https://github.com/CocoaPods/Specs.git'

platform :ios, '13.0'
plugin 'cocoapods-art', :sources => ['onegini']
use_frameworks!

install! 'cocoapods', :deterministic_uuids => false

production = ENV["PRODUCTION"] == "1"


def do_pre_install
  $static_framework = ['Flipper', 'Flipper-Folly','Flipper-RSocket','FlipperKit', 'Flipper-Fmt']
  pre_install do |installer|
    Pod::Installer::Xcode::TargetValidator.send(:define_method,
                                                :verify_no_static_framework_transitive_dependencies) {}
    installer.pod_targets.each do |pod|
      if $static_framework.include?(pod.name)
        def pod.build_type;
          Pod::BuildType.static_library
        end
      end
    end
  end
end


def do_post_install
  use_flipper!({ 'Flipper' => '0.125.0', 'Flipper-Folly' => '2.6.10', 'Flipper-RSocket' => '1.4.3'})
  post_install do |installer|
    flipper_post_install(installer)
    installer.pods_project.targets.each do |target|
        target.build_configurations.each do |config|
            config.build_settings['ENABLE_BITCODE'] = 'NO'
            config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
        end
    end
  end
end



target 'RNExampleApp' do
  config = use_native_modules!

  # Flags change depending on the env values.
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    # to enable hermes on iOS, change `false` to `true` and then install pods
    :production => production,
    :hermes_enabled => flags[:hermes_enabled],
    :fabric_enabled => flags[:fabric_enabled],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'RNExampleAppTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    react_native_post_install(installer)
    __apply_Xcode_12_5_M1_post_install_workaround(installer)
  end
end
